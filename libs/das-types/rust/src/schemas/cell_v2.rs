// Generated by Molecule 0.7.3

use molecule::prelude::*;

use super::basic::*;
use super::cell::*;
#[derive(Clone)]
pub struct AccountCellDataV2(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "registered_at", self.registered_at())?;
        write!(
            f,
            ", {}: {}",
            "last_transfer_account_at",
            self.last_transfer_account_at()
        )?;
        write!(f, ", {}: {}", "last_edit_manager_at", self.last_edit_manager_at())?;
        write!(f, ", {}: {}", "last_edit_records_at", self.last_edit_records_at())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "records", self.records())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for AccountCellDataV2 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            97, 0, 0, 0, 36, 0, 0, 0, 56, 0, 0, 0, 60, 0, 0, 0, 68, 0, 0, 0, 76, 0, 0, 0, 84, 0, 0, 0, 92, 0, 0, 0, 93,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
        ];
        AccountCellDataV2::new_unchecked(v.into())
    }
}
impl AccountCellDataV2 {
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> AccountId {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        AccountId::new_unchecked(self.0.slice(start..end))
    }
    pub fn account(&self) -> AccountChars {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        AccountChars::new_unchecked(self.0.slice(start..end))
    }
    pub fn registered_at(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn last_transfer_account_at(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn last_edit_manager_at(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn last_edit_records_at(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn status(&self) -> Uint8 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint8::new_unchecked(self.0.slice(start..end))
    }
    pub fn records(&self) -> Records {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[36..]) as usize;
            Records::new_unchecked(self.0.slice(start..end))
        } else {
            Records::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountCellDataV2Reader<'r> {
        AccountCellDataV2Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountCellDataV2 {
    type Builder = AccountCellDataV2Builder;
    const NAME: &'static str = "AccountCellDataV2";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountCellDataV2(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountCellDataV2Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountCellDataV2Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .id(self.id())
            .account(self.account())
            .registered_at(self.registered_at())
            .last_transfer_account_at(self.last_transfer_account_at())
            .last_edit_manager_at(self.last_edit_manager_at())
            .last_edit_records_at(self.last_edit_records_at())
            .status(self.status())
            .records(self.records())
    }
}
#[derive(Clone, Copy)]
pub struct AccountCellDataV2Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "registered_at", self.registered_at())?;
        write!(
            f,
            ", {}: {}",
            "last_transfer_account_at",
            self.last_transfer_account_at()
        )?;
        write!(f, ", {}: {}", "last_edit_manager_at", self.last_edit_manager_at())?;
        write!(f, ", {}: {}", "last_edit_records_at", self.last_edit_records_at())?;
        write!(f, ", {}: {}", "status", self.status())?;
        write!(f, ", {}: {}", "records", self.records())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AccountCellDataV2Reader<'r> {
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> AccountIdReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        AccountIdReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn account(&self) -> AccountCharsReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        AccountCharsReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn registered_at(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn last_transfer_account_at(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn last_edit_manager_at(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn last_edit_records_at(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn status(&self) -> Uint8Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint8Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn records(&self) -> RecordsReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[36..]) as usize;
            RecordsReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            RecordsReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountCellDataV2Reader<'r> {
    type Entity = AccountCellDataV2;
    const NAME: &'static str = "AccountCellDataV2Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountCellDataV2Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AccountIdReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        AccountCharsReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint64Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Uint64Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Uint64Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint64Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Uint8Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        RecordsReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AccountCellDataV2Builder {
    pub(crate) id: AccountId,
    pub(crate) account: AccountChars,
    pub(crate) registered_at: Uint64,
    pub(crate) last_transfer_account_at: Uint64,
    pub(crate) last_edit_manager_at: Uint64,
    pub(crate) last_edit_records_at: Uint64,
    pub(crate) status: Uint8,
    pub(crate) records: Records,
}
impl AccountCellDataV2Builder {
    pub const FIELD_COUNT: usize = 8;
    pub fn id(mut self, v: AccountId) -> Self {
        self.id = v;
        self
    }
    pub fn account(mut self, v: AccountChars) -> Self {
        self.account = v;
        self
    }
    pub fn registered_at(mut self, v: Uint64) -> Self {
        self.registered_at = v;
        self
    }
    pub fn last_transfer_account_at(mut self, v: Uint64) -> Self {
        self.last_transfer_account_at = v;
        self
    }
    pub fn last_edit_manager_at(mut self, v: Uint64) -> Self {
        self.last_edit_manager_at = v;
        self
    }
    pub fn last_edit_records_at(mut self, v: Uint64) -> Self {
        self.last_edit_records_at = v;
        self
    }
    pub fn status(mut self, v: Uint8) -> Self {
        self.status = v;
        self
    }
    pub fn records(mut self, v: Records) -> Self {
        self.records = v;
        self
    }
}
impl molecule::prelude::Builder for AccountCellDataV2Builder {
    type Entity = AccountCellDataV2;
    const NAME: &'static str = "AccountCellDataV2Builder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.id.as_slice().len()
            + self.account.as_slice().len()
            + self.registered_at.as_slice().len()
            + self.last_transfer_account_at.as_slice().len()
            + self.last_edit_manager_at.as_slice().len()
            + self.last_edit_records_at.as_slice().len()
            + self.status.as_slice().len()
            + self.records.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.id.as_slice().len();
        offsets.push(total_size);
        total_size += self.account.as_slice().len();
        offsets.push(total_size);
        total_size += self.registered_at.as_slice().len();
        offsets.push(total_size);
        total_size += self.last_transfer_account_at.as_slice().len();
        offsets.push(total_size);
        total_size += self.last_edit_manager_at.as_slice().len();
        offsets.push(total_size);
        total_size += self.last_edit_records_at.as_slice().len();
        offsets.push(total_size);
        total_size += self.status.as_slice().len();
        offsets.push(total_size);
        total_size += self.records.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.id.as_slice())?;
        writer.write_all(self.account.as_slice())?;
        writer.write_all(self.registered_at.as_slice())?;
        writer.write_all(self.last_transfer_account_at.as_slice())?;
        writer.write_all(self.last_edit_manager_at.as_slice())?;
        writer.write_all(self.last_edit_records_at.as_slice())?;
        writer.write_all(self.status.as_slice())?;
        writer.write_all(self.records.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountCellDataV2::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct PreAccountCellDataV2(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for PreAccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for PreAccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for PreAccountCellDataV2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "refund_lock", self.refund_lock())?;
        write!(f, ", {}: {}", "owner_lock_args", self.owner_lock_args())?;
        write!(f, ", {}: {}", "inviter_id", self.inviter_id())?;
        write!(f, ", {}: {}", "inviter_lock", self.inviter_lock())?;
        write!(f, ", {}: {}", "channel_lock", self.channel_lock())?;
        write!(f, ", {}: {}", "price", self.price())?;
        write!(f, ", {}: {}", "quote", self.quote())?;
        write!(f, ", {}: {}", "invited_discount", self.invited_discount())?;
        write!(f, ", {}: {}", "created_at", self.created_at())?;
        write!(f, ", {}: {}", "initial_records", self.initial_records())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for PreAccountCellDataV2 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            170, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 105, 0, 0, 0, 109, 0, 0, 0, 113, 0, 0, 0, 113, 0, 0, 0, 113, 0, 0,
            0, 146, 0, 0, 0, 154, 0, 0, 0, 158, 0, 0, 0, 166, 0, 0, 0, 4, 0, 0, 0, 53, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0,
            0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,
            0, 0,
        ];
        PreAccountCellDataV2::new_unchecked(v.into())
    }
}
impl PreAccountCellDataV2 {
    pub const FIELD_COUNT: usize = 11;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> AccountChars {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        AccountChars::new_unchecked(self.0.slice(start..end))
    }
    pub fn refund_lock(&self) -> Script {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Script::new_unchecked(self.0.slice(start..end))
    }
    pub fn owner_lock_args(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }
    pub fn inviter_id(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }
    pub fn inviter_lock(&self) -> ScriptOpt {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        ScriptOpt::new_unchecked(self.0.slice(start..end))
    }
    pub fn channel_lock(&self) -> ScriptOpt {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        ScriptOpt::new_unchecked(self.0.slice(start..end))
    }
    pub fn price(&self) -> PriceConfig {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        PriceConfig::new_unchecked(self.0.slice(start..end))
    }
    pub fn quote(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn invited_discount(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn created_at(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn initial_records(&self) -> Records {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[48..]) as usize;
            Records::new_unchecked(self.0.slice(start..end))
        } else {
            Records::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> PreAccountCellDataV2Reader<'r> {
        PreAccountCellDataV2Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for PreAccountCellDataV2 {
    type Builder = PreAccountCellDataV2Builder;
    const NAME: &'static str = "PreAccountCellDataV2";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        PreAccountCellDataV2(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PreAccountCellDataV2Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PreAccountCellDataV2Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .account(self.account())
            .refund_lock(self.refund_lock())
            .owner_lock_args(self.owner_lock_args())
            .inviter_id(self.inviter_id())
            .inviter_lock(self.inviter_lock())
            .channel_lock(self.channel_lock())
            .price(self.price())
            .quote(self.quote())
            .invited_discount(self.invited_discount())
            .created_at(self.created_at())
            .initial_records(self.initial_records())
    }
}
#[derive(Clone, Copy)]
pub struct PreAccountCellDataV2Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PreAccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PreAccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PreAccountCellDataV2Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "refund_lock", self.refund_lock())?;
        write!(f, ", {}: {}", "owner_lock_args", self.owner_lock_args())?;
        write!(f, ", {}: {}", "inviter_id", self.inviter_id())?;
        write!(f, ", {}: {}", "inviter_lock", self.inviter_lock())?;
        write!(f, ", {}: {}", "channel_lock", self.channel_lock())?;
        write!(f, ", {}: {}", "price", self.price())?;
        write!(f, ", {}: {}", "quote", self.quote())?;
        write!(f, ", {}: {}", "invited_discount", self.invited_discount())?;
        write!(f, ", {}: {}", "created_at", self.created_at())?;
        write!(f, ", {}: {}", "initial_records", self.initial_records())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> PreAccountCellDataV2Reader<'r> {
    pub const FIELD_COUNT: usize = 11;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> AccountCharsReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        AccountCharsReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn refund_lock(&self) -> ScriptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        ScriptReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn owner_lock_args(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn inviter_id(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn inviter_lock(&self) -> ScriptOptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        ScriptOptReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn channel_lock(&self) -> ScriptOptReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        ScriptOptReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn price(&self) -> PriceConfigReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        PriceConfigReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn quote(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn invited_discount(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn created_at(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn initial_records(&self) -> RecordsReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[48..]) as usize;
            RecordsReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            RecordsReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for PreAccountCellDataV2Reader<'r> {
    type Entity = PreAccountCellDataV2;
    const NAME: &'static str = "PreAccountCellDataV2Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        PreAccountCellDataV2Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AccountCharsReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ScriptReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        BytesReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        BytesReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        ScriptOptReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        ScriptOptReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        PriceConfigReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Uint64Reader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Uint32Reader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        Uint64Reader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        RecordsReader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct PreAccountCellDataV2Builder {
    pub(crate) account: AccountChars,
    pub(crate) refund_lock: Script,
    pub(crate) owner_lock_args: Bytes,
    pub(crate) inviter_id: Bytes,
    pub(crate) inviter_lock: ScriptOpt,
    pub(crate) channel_lock: ScriptOpt,
    pub(crate) price: PriceConfig,
    pub(crate) quote: Uint64,
    pub(crate) invited_discount: Uint32,
    pub(crate) created_at: Uint64,
    pub(crate) initial_records: Records,
}
impl PreAccountCellDataV2Builder {
    pub const FIELD_COUNT: usize = 11;
    pub fn account(mut self, v: AccountChars) -> Self {
        self.account = v;
        self
    }
    pub fn refund_lock(mut self, v: Script) -> Self {
        self.refund_lock = v;
        self
    }
    pub fn owner_lock_args(mut self, v: Bytes) -> Self {
        self.owner_lock_args = v;
        self
    }
    pub fn inviter_id(mut self, v: Bytes) -> Self {
        self.inviter_id = v;
        self
    }
    pub fn inviter_lock(mut self, v: ScriptOpt) -> Self {
        self.inviter_lock = v;
        self
    }
    pub fn channel_lock(mut self, v: ScriptOpt) -> Self {
        self.channel_lock = v;
        self
    }
    pub fn price(mut self, v: PriceConfig) -> Self {
        self.price = v;
        self
    }
    pub fn quote(mut self, v: Uint64) -> Self {
        self.quote = v;
        self
    }
    pub fn invited_discount(mut self, v: Uint32) -> Self {
        self.invited_discount = v;
        self
    }
    pub fn created_at(mut self, v: Uint64) -> Self {
        self.created_at = v;
        self
    }
    pub fn initial_records(mut self, v: Records) -> Self {
        self.initial_records = v;
        self
    }
}
impl molecule::prelude::Builder for PreAccountCellDataV2Builder {
    type Entity = PreAccountCellDataV2;
    const NAME: &'static str = "PreAccountCellDataV2Builder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.account.as_slice().len()
            + self.refund_lock.as_slice().len()
            + self.owner_lock_args.as_slice().len()
            + self.inviter_id.as_slice().len()
            + self.inviter_lock.as_slice().len()
            + self.channel_lock.as_slice().len()
            + self.price.as_slice().len()
            + self.quote.as_slice().len()
            + self.invited_discount.as_slice().len()
            + self.created_at.as_slice().len()
            + self.initial_records.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.account.as_slice().len();
        offsets.push(total_size);
        total_size += self.refund_lock.as_slice().len();
        offsets.push(total_size);
        total_size += self.owner_lock_args.as_slice().len();
        offsets.push(total_size);
        total_size += self.inviter_id.as_slice().len();
        offsets.push(total_size);
        total_size += self.inviter_lock.as_slice().len();
        offsets.push(total_size);
        total_size += self.channel_lock.as_slice().len();
        offsets.push(total_size);
        total_size += self.price.as_slice().len();
        offsets.push(total_size);
        total_size += self.quote.as_slice().len();
        offsets.push(total_size);
        total_size += self.invited_discount.as_slice().len();
        offsets.push(total_size);
        total_size += self.created_at.as_slice().len();
        offsets.push(total_size);
        total_size += self.initial_records.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.account.as_slice())?;
        writer.write_all(self.refund_lock.as_slice())?;
        writer.write_all(self.owner_lock_args.as_slice())?;
        writer.write_all(self.inviter_id.as_slice())?;
        writer.write_all(self.inviter_lock.as_slice())?;
        writer.write_all(self.channel_lock.as_slice())?;
        writer.write_all(self.price.as_slice())?;
        writer.write_all(self.quote.as_slice())?;
        writer.write_all(self.invited_discount.as_slice())?;
        writer.write_all(self.created_at.as_slice())?;
        writer.write_all(self.initial_records.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        PreAccountCellDataV2::new_unchecked(inner.into())
    }
}
