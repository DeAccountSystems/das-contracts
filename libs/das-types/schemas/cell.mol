import basic;

// ActionData

table ActionData {
    action: Bytes,
    params: Bytes,
}

// ConfigCellData

table ConfigCellMain {
    // Global DAS system switch, 0x01 means system on, 0x00 means system off.
    status: Uint8,
    // table of type ID of all kinds of cells
    type_id_table: TypeIdTable,
    // table code_hash of dynamic libs of das-lock
    das_lock_out_point_table: DasLockOutPointTable,
    // table of type ID of das-lock dynamic libs
    das_lock_type_id_table: DasLockTypeIdTable,
}

table TypeIdTable {
    account_cell: Hash,
    apply_register_cell: Hash,
    balance_cell: Hash,
    income_cell: Hash,
    pre_account_cell: Hash,
    proposal_cell: Hash,
    account_sale_cell: Hash,
    account_auction_cell: Hash,
    offer_cell: Hash,
    reverse_record_cell: Hash,
    sub_account_cell: Hash,
    eip712_lib: Hash,
    reverse_record_root_cell: Hash,
    // TODO rename to the contract name
    key_list_config_cell: Hash,
    dpoint_cell: Hash,
}

table DasLockOutPointTable {
    ckb_signall: OutPoint,
    ckb_multisign: OutPoint,
    ckb_anyone_can_pay: OutPoint,
    eth: OutPoint,
    tron: OutPoint,
    ed25519: OutPoint,
    web_authn: OutPoint,
}

table DasLockTypeIdTable {
    ckb_signhash: Hash,
    ckb_multisig: Hash,
    ed25519: Hash,
    eth: Hash,
    tron: Hash,
    doge: Hash,
    web_authn: Hash,
}

table ConfigCellAccount {
    // The maximum length of accounts in characters.
    max_length: Uint32,
    // The basic capacity AccountCell required, it is bigger than or equal to AccountCell occupied capacity.
    basic_capacity: Uint64,
    // The fees prepared for various transactions for operating an account.
    prepared_fee_capacity: Uint64,
    // The grace period for account expiration in seconds
    expiration_grace_period: Uint32,
    // The minimum ttl of record in seconds
    record_min_ttl: Uint32,
    // The maximum size of all records in molecule encoding
    record_size_limit: Uint32,
    // The fee of each action
    transfer_account_fee: Uint64,
    edit_manager_fee: Uint64,
    edit_records_fee: Uint64,
    common_fee: Uint64,
    // The frequency limit of actions which manipulating account
    transfer_account_throttle: Uint32,
    edit_manager_throttle: Uint32,
    edit_records_throttle: Uint32,
    common_throttle: Uint32,
    // Auction duration for expired accounts
    expiration_auction_period: Uint32,
    // Shipping time after auction ends
    expiration_deliver_period: Uint32,
    // Premium at initial auction for expired accounts
    expiration_auction_start_premiums: Uint32,
}

table ConfigCellApply {
    // The minimum waiting block number before apply_register_cell can be converted to pre_account_cell.
    apply_min_waiting_block_number: Uint32,
    // The maximum waiting block number which apply_register_cell can be converted to pre_account_cell.
    apply_max_waiting_block_number: Uint32,
}

vector Chars <Bytes>;

table ConfigCellPrice {
    // discount configurations
    discount: DiscountConfig,
    // Price list of different account length.
    prices: PriceConfigList,
}

table DiscountConfig {
    // The discount rate for invited user
    invited_discount: Uint32,
}

vector PriceConfigList <PriceConfig>;

table PriceConfig {
  // The length of the account, ".bit" suffix is not included.
  length: Uint8,
  // The price of registering an account. In USD, accurate to 6 decimal places.
  new: Uint64,
  // The price of renewing an account. In USD, accurate to 6 decimal places.
  renew: Uint64,
}

table ConfigCellProposal {
    // How many blocks required for every proposal to be confirmed.
    proposal_min_confirm_interval: Uint8,
    // How many blocks to wait before extending the proposal.
    proposal_min_extend_interval: Uint8,
    // How many blocks to wait before recycle the proposal.
    proposal_min_recycle_interval: Uint8,
    // How many account_cells every proposal can affect.
    proposal_max_account_affect: Uint32,
    // How many pre_account_cells be included in every proposal.
    proposal_max_pre_account_contain: Uint32,
}

table ConfigCellProfitRate {
    // The profit rate of inviters who invite people to buy DAS accounts.
    inviter: Uint32,
    // The profit rate of channels who support people to create DAS accounts.
    channel: Uint32,
    // The profit rate for who created proposal
    proposal_create: Uint32,
    // The profit rate for who confirmed proposal
    proposal_confirm: Uint32,
    // The profit rate for consolidating IncomeCells
    income_consolidate: Uint32,
    // SaleCell =======================================
    // The profit rate for inviter in account sale.
    sale_buyer_inviter: Uint32,
    // The profit rate for channel in account sale.
    sale_buyer_channel: Uint32,
    // The profit rate for DAS in account sale.
    sale_das: Uint32,
    // AuctionCell ====================================
    // The profit rate for the inviter of bidders in each bid
    auction_bidder_inviter: Uint32,
    // The profit rate for the channel of bidders in each bid
    auction_bidder_channel: Uint32,
    // The profit rate for DAS in each bid
    auction_das: Uint32,
    // The profit rate for previous bidder in each bid, the seller will be treated as the first bidder.
    auction_prev_bidder: Uint32,
}

table ConfigCellIncome {
    // The basic capacity IncomeCell required, it is bigger than or equal to IncomeCell occupied capacity.
    basic_capacity: Uint64,
    // The maximum records one IncomeCell can hold.
    max_records: Uint32,
    // The minimum capacity which determines whether a record should be transferred.
    min_transfer_capacity: Uint64,
}

table ConfigCellRelease {
    // Current lucky number for estimate if an account is released.
    lucky_number: Uint32,
}

table ConfigCellSecondaryMarket {
    // The common fee for every transactions AccountSaleCell and AccountAuctionCell involved.
    common_fee: Uint64,
    // SaleCell =======================================
    // The minimum price for selling an account.
    sale_min_price: Uint64,
    // Expiration time limit for selling accounts.
    sale_expiration_limit: Uint32,
    // Bytes size limitation of the description for account sale.
    sale_description_bytes_limit: Uint32,
    // The basic capacity AccountSaleCell required, it is bigger than or equal to AccountSaleCell occupied capacity.
    sale_cell_basic_capacity: Uint64,
    // The fees prepared for various transactions.
    sale_cell_prepared_fee_capacity: Uint64,
    // AuctionCell ====================================
    // The maximum extendable duration time for an auction, unit in seconds.
    auction_max_extendable_duration: Uint32,
    // The increment of duration brought by each bid in the auction, unit in seconds.
    auction_duration_increment_each_bid: Uint32,
    // The minimum opening price for an auction.
    auction_min_opening_price: Uint64,
    // The minimum bid increment rate of each bid.
    auction_min_increment_rate_each_bid: Uint32,
    // Bytes size limitation of the description for an auction.
    auction_description_bytes_limit: Uint32,
    // The basic capacity AccountAuctionCell required, it is bigger than or equal to AccountAuctionCell occupied capacity.
    auction_cell_basic_capacity: Uint64,
    // The fees prepared for various transactions.
    auction_cell_prepared_fee_capacity: Uint64,
    // The minimum price for making an offer.
    offer_min_price: Uint64,
    // The basic capacity OfferCell required, it is bigger than or equal to OfferCell occupied capacity.
    offer_cell_basic_capacity: Uint64,
    // The fees prepared for various transactions.
    offer_cell_prepared_fee_capacity: Uint64,
    // Bytes size limitation of the message for offer.
    offer_message_bytes_limit: Uint32,
}

table ConfigCellReverseResolution {
    // The basic capacity ReverseRecordCell required, it is bigger than or equal to ReverseRecordCell occupied capacity.
    record_basic_capacity: Uint64,
    // The fees prepared for various transactions.
    record_prepared_fee_capacity: Uint64,
    // The common fee for every transactions ReverseRecordCell involved.
    common_fee: Uint64,
}

table ConfigCellSubAccount {
    // The basic capacity SubAccountCell required, it is bigger than or equal to SubAccountCell occupied capacity.
    basic_capacity: Uint64,
    // The fees prepared for various transactions.
    prepared_fee_capacity: Uint64,
    // The price to register a new sub-account.
    new_sub_account_price: Uint64,
    // The price to register a renew sub-account.
    renew_sub_account_price: Uint64,
    // The common fee for every transactions SubAccountCell involved.
    common_fee: Uint64,
    // The fee for create_sub_account action.
    create_fee: Uint64,
    // The fee for edit_sub_account action.
    edit_fee: Uint64,
    // The fee for renew_sub_account action.
    renew_fee: Uint64,
    // The fee for recycle_sub_account action.
    recycle_fee: Uint64,
    // The profit rate for DAS when creating a new sub-account with custom scripts.
    new_sub_account_custom_price_das_profit_rate: Uint32,
    // The profit rate for DAS when renewing a sub-account with custom scripts.
    renew_sub_account_custom_price_das_profit_rate: Uint32,
}

table ConfigCellSystemStatus {
    apply_register_cell_type: ContractStatus,
    pre_account_cell_type: ContractStatus,
    proposal_cell_type: ContractStatus,
    config_cell_type: ContractStatus,
    account_cell_type: ContractStatus,
    account_sale_cell_type: ContractStatus,
    sub_account_cell_type: ContractStatus,
    offer_cell_type: ContractStatus,
    balance_cell_type: ContractStatus,
    income_cell_type: ContractStatus,
    reverse_record_cell_type: ContractStatus,
    reverse_record_root_cell_type: ContractStatus,
    eip712_lib: ContractStatus,
}

table ContractStatus {
    status: byte,
    version: Bytes,
}

table ConfigCellDPoint {
    // The basic capacity DPointCell required, it is bigger than or equal to DPointCell occupied capacity.
    basic_capacity: Uint64,
    // The fees prepared for various transactions.
    prepared_fee_capacity: Uint64,
    // The addresses can transfer and receive DPointCells.
    transfer_whitelist: Scripts,
    // The addresses for recycling the CKB occupied by DPointCells.
    capacity_recycle_whitelist: Scripts,
}

// ProposalCellData

table ProposalCellData {
    proposer_lock: Script,
    created_at_height: Uint64,
    slices: SliceList,
}

vector SliceList <SL>;

// SL is used here for "slice" because "slice" may be a keyword in some languages.
vector SL <ProposalItem>;

table ProposalItem {
  // When account is the root of the linked list, its account_id should be 0x0000... .
  account_id: AccountId,
  item_type: Uint8,
  // When account is at the end of the linked list, its next pointer should be 0xffff... .
  next: AccountId,
}

// IncomeCellData

table IncomeCellData {
    creator: Script,
    records: IncomeRecords,
}

vector IncomeRecords <IncomeRecord>;

table IncomeRecord {
    belong_to: Script,
    capacity: Uint64,
}

// AccountCellData
table AccountCellData {
    // The first 160 bits of the hash of account.
    id: AccountId,
    // Separate chars of account.
    account: AccountChars,
    // AccountCell register timestamp.
    registered_at: Uint64,
    // AccountCell last action timestamp.
    last_transfer_account_at: Uint64,
    last_edit_manager_at: Uint64,
    last_edit_records_at: Uint64,
    // The status of the account, 0x00 means normal, 0x01 means being sold, 0x02 means being auctioned.
    status: Uint8,
    records: Records,
    // The status of sub-account function, 0x00 means disabled, 0x01 means enabled.
    enable_sub_account: Uint8,
    // The price of renewing sub-account for one year.
    renew_sub_account_price: Uint64,
    // The approval that can be fulfilled in the future.
    approval: AccountApproval,
}

array AccountId [byte; 20];

table Record {
    record_type: Bytes,
    record_key: Bytes,
    record_label: Bytes,
    record_value: Bytes,
    record_ttl: Uint32,
}

vector Records <Record>;

table AccountApproval {
    action: Bytes,
    params: Bytes,
}

table AccountApprovalTransfer {
    platform_lock: Script,
    protected_until: Uint64,
    sealed_until: Uint64,
    delay_count_remain: Uint8,
    to_lock: Script,
}

// AccountSaleCellData

table AccountSaleCellDataV1 {
    // Account ID of associated account.
    account_id: AccountId,
    // Account name of associated account.
    account: Bytes,
    // The price user willing to sell the account.
    price: Uint64,
    // A customizable description for the account.
    description: Bytes,
    // timestamp of account sale start.
    started_at: Uint64,
}

table AccountSaleCellData {
    // Account ID of associated account.
    account_id: AccountId,
    // Account name of associated account.
    account: Bytes,
    // The price user willing to sell the account.
    price: Uint64,
    // A customizable description for the account.
    description: Bytes,
    // timestamp of account sale start.
    started_at: Uint64,
    // The custom profit rate for the inviter of buyer.
    buyer_inviter_profit_rate: Uint32,
}

// AccountAuctionCellData

table AccountAuctionCellData {
    // The account ID of associated account.
    account_id: AccountId,
    // Account name of associated account.
    account: Bytes,
    // The description of the auction.
    description: Bytes,
    // The opening price of the auction in shannon.
    opening_price: Uint64,
    // The bid increment rate.
    increment_rate_each_bid: Uint32,
    // The start timestamp of auction, unit in seconds.
    started_at: Uint64,
    // The end timestamp of auction, unit in seconds.
    ended_at: Uint64,
    // The current bidder's lock script.
    current_bidder_lock: Script,
    // The current bidder's bid price.
    current_bid_price: Uint64,
    // The profit rate for previous bidder in each bid, the seller will be treated as the first bidder.
    prev_bidder_profit_rate: Uint32,
}

// PreAccountCellData
table PreAccountCellData {
    // Separate chars of account.
    account: AccountChars,
    // If the PreAccountCell cannot be registered, this field specifies to whom the refund should be given.
    refund_lock: Script,
    // If the PreAccountCell is registered successfully, this field specifies to whom the account should be given.
    owner_lock_args: Bytes,
    // The account ID of inviter, it will not be used for any verification, just for front-end identification.
    inviter_id: Bytes,
    // The lock script of inviter.
    inviter_lock: ScriptOpt,
    // The lock script of channel.
    channel_lock: ScriptOpt,
    // Price of the account at the moment of registration.
    price: PriceConfig,
    // The exchange rate between CKB and USD.
    quote: Uint64,
    // The discount rate for invited user
    invited_discount: Uint32,
    // The created timestamp of the PreAccountCell.
    created_at: Uint64,
    // The initial records should be write into the AccountCell when it is created successfully.
    initial_records: Records,
    // Lock for cross chain when the AccountCell minted successfully.
    initial_cross_chain: ChainId,
}

table ChainId {
    // Indicate if this field should work. (0x00 means false, 0x01 mean true)
    checked: Uint8,
    coin_type: Uint64,
    chain_id: Uint64,
}

vector AccountChars <AccountChar>;

table AccountChar {
    // Name of the char set which the char belongs.
    char_set_name: Uint32,
    // Bytes of the char.
    bytes: Bytes,
}

// OfferCellData

table OfferCellData {
    // The account of the offer .
    account: Bytes,
    // The price of the offer.
    price: Uint64,
    // The message from the offer maker to the seller.
    message: Bytes,
    // The lock script of inviter.
    inviter_lock: Script,
    // The lock script of channel.
    channel_lock: Script,
}

// SubAccountData
table SubAccount {
    // The lock of owner and manager
    lock: Script,
    // The first 160 bits of the hash of account.
    id: AccountId,
    // Separate chars of account.
    account: AccountChars,
    // The suffix of this sub-account, it is always .bit currently.
    suffix: Bytes,
    // The sub-account register timestamp.
    registered_at: Uint64,
    // The sub-account expiration timestamp.
    expired_at: Uint64,
    // The status of the account, 0x00 means normal, 0x01 means being sold, 0x02 means being auctioned.
    status: Uint8,
    // Resolving records of this sub-account.
    records: Records,
    // This is a count field, it mainly used to prevent replay attacks.
    nonce: Uint64,
    // If sub-account of sub-account is enabled.
    enable_sub_account: Uint8,
    // The price of renew sub-account of this sub-account.
    renew_sub_account_price: Uint64,
    // The approval that can be fulfilled in the future.
    approval: AccountApproval,
}

table SubAccountRule {
    index: Uint32,
    name: Bytes,
    note: Bytes,
    price: Uint64,
    ast: ASTExpression,
    status: Uint8,
}

vector SubAccountRules <SubAccountRule>;

// Because the molecule do not support recursive type, we can not use union here.
table ASTExpression {
    // Indicate the real type of expression field:
    // - 0x00 ASTOperator
    // - 0x01 ASTFunction
    // - 0x02 ASTVariable
    // - 0x03 ASTValue
    expression_type: byte,
    expression: Bytes,
}

vector ASTExpressions <ASTExpression>;

table ASTOperator {
    // Indicate the operator type:
    // - 0x00 `not`
    // - 0x01 `and`
    // - 0x02 `or`
    // - 0x03 `>`
    // - 0x04 `>=`
    // - 0x05 `<
    // - 0x06 `<=`
    // - 0x07 `==`
    symbol: byte,
    expressions: ASTExpressions,
}

table ASTFunction {
    // Indicate the function name:
    // - 0x00 `include_chars`
    // - 0x01 `only_include_charset`
    // - 0x02 `in_whitelist`
    name: byte,
    arguments: ASTExpressions,
}

table ASTVariable {
    // Indicate the variable name:
    // - 0x00 `account`
    // - 0x01 `account_chars`
    // - 0x02 `account_length`
    name: byte,
}

table ASTValue {
    // Indicate the value type
    // - 0x00 bool
    // - 0x01 uint8
    // - 0x02 uint32
    // - 0x03 uint64
    // - 0x04 binary
    // - 0x05 binary[]
    // - 0x06 string
    // - 0x07 string[]
    // - 0x08 charset_type
    value_type: byte,
    value: Bytes,
}
// DeviceKeyList

struct DeviceKey {
    // main-algorithm id
    main_alg_id: Uint8,
    // sub-algorithm id
    sub_alg_id: Uint8,
    // The credential id takes the first 10 bytes after performing sha256 5 times.
    cid: Byte10,
    // After five sha256 operations are performed on the public key, the first 10 bytes are taken.
    pubkey: Byte10,
}


vector DeviceKeyList <DeviceKey>;

table DeviceKeyListCellData {
    // Device keys.
    keys: DeviceKeyList,
    // On destroy-device-key-list, send the remaining capacity to refund_lock.
    refund_lock: Script,
}

table MapEntry {
    // Map key
    key: Bytes,
    // Map value
    value: Bytes,
}

vector ConfigList <MapEntry>;

table Config {
    status: Uint8,
    configs: ConfigList,
}

table OrderInfo {
    memo: Bytes,
}
